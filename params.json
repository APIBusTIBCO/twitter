{"name":"Twitter","tagline":"A Ruby interface to the Twitter API.","body":"# The Twitter Ruby Gem\r\n\r\n[![Gem Version](https://badge.fury.io/rb/twitter.png)][gem]\r\n[![Build Status](https://secure.travis-ci.org/sferik/twitter.png?branch=master)][travis]\r\n[![Dependency Status](https://gemnasium.com/sferik/twitter.png?travis)][gemnasium]\r\n[![Code Climate](https://codeclimate.com/github/sferik/twitter.png)][codeclimate]\r\n[![Coverage Status](https://coveralls.io/repos/sferik/twitter/badge.png?branch=master)][coveralls]\r\n[![Gittip](http://img.shields.io/gittip/sferik.png)][gittip]\r\n\r\n[gem]: https://rubygems.org/gems/twitter\r\n[travis]: http://travis-ci.org/sferik/twitter\r\n[gemnasium]: https://gemnasium.com/sferik/twitter\r\n[codeclimate]: https://codeclimate.com/github/sferik/twitter\r\n[coveralls]: https://coveralls.io/r/sferik/twitter\r\n[gittip]: https://www.gittip.com/sferik/\r\n\r\nA Ruby interface to the Twitter API.\r\n\r\n## Installation\r\n    gem install twitter\r\n\r\n## CLI\r\n\r\nLooking for the Twitter command-line interface? It was [removed][] from this\r\ngem in version 0.5.0 and now exists as a [separate project][t].\r\n\r\n[removed]: https://github.com/sferik/twitter/commit/dd2445e3e2c97f38b28a3f32ea902536b3897adf\r\n[t]: https://github.com/sferik/t\r\n\r\n## Documentation\r\n[http://rdoc.info/gems/twitter][documentation]\r\n\r\n[documentation]: http://rdoc.info/gems/twitter\r\n\r\n## Examples\r\n[https://github.com/sferik/twitter/tree/master/examples][examples]\r\n\r\n[examples]: https://github.com/sferik/twitter/tree/master/examples\r\n\r\n## Announcements\r\nYou should [follow @gem][follow] on Twitter for announcements and updates about\r\nthis library.\r\n\r\n[follow]: https://twitter.com/gem\r\n\r\n## Mailing List\r\nPlease direct questions about this library to the [mailing list].\r\n\r\n[mailing list]: https://groups.google.com/group/twitter-ruby-gem\r\n\r\n## Apps Wiki\r\nDoes your project or organization use this gem? Add it to the [apps\r\nwiki][apps]!\r\n\r\n[apps]: https://github.com/sferik/twitter/wiki/apps\r\n\r\n## What's New in Version 5?\r\n### Configuration\r\nGlobal configuration has been removed, as it was not threadsafe. Instead, you\r\ncan configure a `Twitter::REST::Client` by passing it a block when it's\r\ninitialized.\r\n\r\n```ruby\r\nclient = Twitter::REST::Client.new do |config|\r\n  config.consumer_key        = \"YOUR_CONSUMER_KEY\"\r\n  config.consumer_secret     = \"YOUR_CONSUMER_SECRET\"\r\n  config.access_token        = \"YOUR_ACCESS_TOKEN\"\r\n  config.access_token_secret = \"YOUR_ACCESS_SECRET\"\r\nend\r\n```\r\n\r\nNote: `oauth_token` has been renamed to `access_token` and `oauth_token_secret`\r\nis now `access_token_secret` to conform to the terminology used in Twitter's\r\ndeveloper documentation.\r\n\r\n### Streaming (Experimental)\r\nThis library now offers support for the [Twitter Streaming API][streaming]. We\r\npreviously recommended using [TweetStream][] for this, however [TweetStream\r\ndoes not work on Ruby 2.0.0][bug].\r\n\r\n[streaming]: https://dev.twitter.com/docs/streaming-apis\r\n[tweetstream]: http://rubygems.org/gems/tweetstream\r\n[bug]: https://github.com/tweetstream/tweetstream/issues/117\r\n\r\nUnlike the rest of this library, this feature is not well tested and not\r\nrecommended for production applications. That said, if you need to do Twitter\r\nstreaming on Ruby 2.0.0, this is probably your best option. I've decided to\r\nship it as an experimental feature and make it more robust over time. Patches\r\nin this area are particularly welcome.\r\n\r\nHopefully, by the time version 6 is released, this gem can fully replace\r\n[TweetStream][], [em-twitter][], [twitterstream][], and [twitter-stream].\r\nSpecial thanks to [Steve Agalloco][spagalloco], [Tim Carey-Smith][halorgium],\r\nand [Tony Arcieri][tarcieri] for helping to develop this feature.\r\n\r\n[em-twitter]: http://rubygems.org/gems/em-twitter\r\n[twitterstream]: http://rubygems.org/gems/twitterstream\r\n[twitter-stream]: http://rubygems.org/gems/twitter-stream\r\n[spagalloco]: https://github.com/spagalloco\r\n[halorgium]: https://github.com/halorgium\r\n[tarcieri]: https://github.com/tarcieri\r\n\r\n**Configuration works just like `Twitter::REST::Client`**\r\n\r\n```ruby\r\nclient = Twitter::Streaming::Client.new do |config|\r\n  config.consumer_key        = \"YOUR_CONSUMER_KEY\"\r\n  config.consumer_secret     = \"YOUR_CONSUMER_SECRET\"\r\n  config.access_token        = \"YOUR_ACCESS_TOKEN\"\r\n  config.access_token_secret = \"YOUR_ACCESS_SECRET\"\r\nend\r\n```\r\n\r\n**Stream mentions of coffee or tea**\r\n\r\n```ruby\r\ntopics = [\"coffee\", \"tea\"]\r\nclient.filter(:track => topics.join(\",\")) do |object|\r\n  puts object.text if object.is_a?(Twitter::Tweet)\r\nend\r\n```\r\n\r\n**Stream a random sample of all tweets**\r\n\r\n```ruby\r\nclient.sample do |object|\r\n  puts object.text if object.is_a?(Twitter::Tweet)\r\nend\r\n```\r\n\r\n**Stream tweets, events, and direct messages for the authenticated user**\r\n\r\n```ruby\r\nclient.user do |object|\r\n  case object\r\n  when Twitter::Tweet\r\n    puts \"It's a tweet!\"\r\n  when Twitter::DirectMessage\r\n    puts \"It's a direct message!\"\r\n  when Twitter::Streaming::StallWarning\r\n    warn \"Falling behind!\"\r\n  end\r\nend\r\n```\r\n\r\nAn `object` may be one of the following:\r\n* Twitter::DirectMessage\r\n* Twitter::Streaming::DeletedTweet\r\n* Twitter::Streaming::Event\r\n* Twitter::Streaming::FriendList\r\n* Twitter::Streaming::StallWarning\r\n* Twitter::Tweet\r\n\r\n### Cursors\r\nThe `Twitter::Cursor` class has been completely redesigned with a focus on\r\nsimplicity and performance.\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Notes</th>\r\n      <th colspan=\"2\">Version 4</th>\r\n      <th colspan=\"2\">Version 5</th>\r\n    </tr>\r\n    <tr>\r\n      <th></th>\r\n      <th>Code</th>\r\n      <th>HTTP GETs</th>\r\n      <th>Code</th>\r\n      <th>HTTP GETs</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n        Are you at the start of the cursor?\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.first</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(1)</em>\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.first?</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(1)</em>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        Return your most recent follower.\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.users.first</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(1)</em>\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.first</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(1)</em>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        Return an array of all your friends.\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.all</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(n+1)</em>\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.to_a</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(n)</em>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        Collect your 20 most recent friends.\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.take(20)</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(n+1)</em>\r\n      </td>\r\n      <td>\r\n        <pre><code>client.friends.take(20)</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(1)</em>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n        Collect your 20 most recent friends twice.\r\n      </td>\r\n      <td>\r\n        <pre><code>friends = client.friends\r\n2.times.collect do\r\n  friends.take(20)\r\nend</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(2n+2)</em>\r\n      </td>\r\n      <td>\r\n        <pre><code>friends = client.friends\r\n2.times.collect do\r\n  friends.take(20)\r\nend</code></pre>\r\n      </td>\r\n      <td>\r\n        <em>Θ(1)</em>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\nIn the examples above, *n* varies with the number of people the authenticated\r\nuser follows on Twitter. This resource returns up to 20 friends per HTTP GET,\r\nso if the authenticated user follows 200 people, calling\r\n`client.friends.take(20)` would make 11 HTTP requests in version 4. In version\r\n5, it makes just 1 HTTP request. Keep in mind, eliminating a single HTTP\r\nrequest to the Twitter API will reduce the latency of your application by\r\n[about 500 ms][status].\r\n\r\n[status]: https://dev.twitter.com/status\r\n\r\nThe last example might seem contrived (\"Why would I call\r\n`client.friends.take(20)` twice?\") but it applies to any\r\n[`Enumerable`][enumerable] method you might call on a cursor, including:\r\n`#all?`, `#collect`, `#count`, `#each`, `#inject`, `#max`, `#min`, `#reject`,\r\n`#reverse_each`, `#select`, `#sort`, `#sort_by`, and `#to_a`. In version 4,\r\neach time you called one of those methods, it would perform *n+1* HTTP\r\nrequests. In version 5, it only performs those HTTP requests the first time any\r\none of those methods is called. Each subsequent call fetches data from a\r\n[cache][].\r\n\r\n[enumerable]: http://ruby-doc.org/core-2.0/Enumerable.html\r\n[cache]: https://github.com/sferik/twitter/commit/7d8b2727af9400643ac397207185fd54e3f6387b\r\n\r\nThe performance improvements are actually even **better** than the table above\r\nindicates. In version 5, calling `Twitter::Cursor#each` (or any\r\n[`Enumerable`][enumerable] method) starts yielding results immediately and\r\ncontinues yielding as each response comes back from the server. In version 4,\r\n`#each` made a series of requests and waited for the last one to complete\r\nbefore yielding any data.\r\n\r\nHere is a list of the interface changes to `Twitter::Cursor`:\r\n\r\n* `#all` has been replaced by `#to_a`.\r\n* `#last` has been replaced by `#last?`.\r\n* `#first` has been replaced by `#first?`.\r\n* `#first` now returns the first element in the collection, as prescribed by `Enumerable`.\r\n* `#collection` and its aliases have been removed.\r\n\r\n### Search Results\r\nThe `Twitter::SearchResults` class has also been redesigned to have an\r\n[`Enumerable`][enumerable] interface. The `#statuses` method and its aliases\r\n(`#collection` and `#results`) have been replaced by `#to_a`. Additionally,\r\nthis class no longer inherits from `Twitter::Base`. As a result, the `#[]`\r\nmethod has been removed.\r\n\r\n### Trend Results\r\nThe `#trends` method now returns an [`Enumerable`][enumerable]\r\n`Twitter::TrendResults` object instead of an array. This object provides\r\nmethods to determinte the recency of the trend (`#as_of`), when the trend\r\nstarted (`#created_at`), and the location of the trend (`#location`). This data\r\nwas previously unavailable.\r\n\r\n### Geo Results\r\nSimilarly, the `#reverse_geocode`, `#geo_search`, and `#similar_places` methods\r\nnow return an [`Enumerable`][enumerable] `Twitter::GeoResults` object instead\r\nof an array. This object provides access to the token to create a new place\r\n(`#token`), which was previously unavailable.\r\n\r\n### Tweets\r\nThe `Twitter::Tweet` object has been cleaned up. The following methods have been\r\nremoved:\r\n\r\n* `#from_user`\r\n* `#from_user_id`\r\n* `#from_user_name`\r\n* `#to_user`\r\n* `#to_user_id`\r\n* `#to_user_name`\r\n* `#profile_image_url`\r\n* `#profile_image_url_https`\r\n\r\nThese attributes can be accessed via the `Twitter::User` object, returned\r\nthrough the `#user` method.\r\n\r\n### Users\r\nThe `Twitter::User` object has also been cleaned up. The following aliases have\r\nbeen removed:\r\n\r\n* `#favorite_count` (use `#favorites_count`)\r\n* `#favoriters_count` (use `#favorites_count`)\r\n* `#favourite_count` (use `#favorites_count`)\r\n* `#favouriters_count` (use `#favorites_count`)\r\n* `#follower_count` (use `#followers_count`)\r\n* `#friend_count` (use `#friends_count`)\r\n* `#status_count` (use `#statuses_count`)\r\n* `#tweet_count` (use `#tweets_count`)\r\n* `#update_count` (use `#tweets_count`)\r\n* `#updates_count` (use `#tweets_count`)\r\n* `#translator` (use `#translator?`)\r\n\r\n### Remove British English aliases\r\nEarlier versions of this library aliased `favourites` to `favorites`. These\r\naliases have been removed. Ruby is implemented in American English. The\r\n`initialize` method is spelled with a \"z\", not an \"s\", and Ruby provides no\r\nalias. Likewise, this library does not provide aliases for Commonwealthers.\r\nMerica. :us:\r\n\r\n### More natural method names\r\nAll create, destroy, add, and remove methods have been renamed to put the verb\r\nat the beginning:\r\n\r\n* `#direct_message_create` is now `#create_direct_message`\r\n* `#direct_message_destroy` is now `#destroy_direct_message`\r\n* `#list_create` is now `#create_list`\r\n* `#list_destroy` is now `#destroy_list`\r\n* `#list_remove_member` is now `#remove_list_member`\r\n* `#list_remove_members` is now `#remove_list_members`\r\n* `#list_add_member` is now `#add_list_member`\r\n* `#list_add_members` is now `#add_list_members`\r\n* `#lists_owned` is now `#owned_list`\r\n* `#saved_search_create` is now `#create_saved_search`\r\n* `#saved_search_destroy` is now `#destroy_saved_search`\r\n* `#status_destroy` is now `#destroy_status`\r\n\r\n### Errors\r\nThe `Twitter::Error::ClientError` and `Twitter::Error::ServerError` class\r\nhierarchy has been removed. All errors now inherit directly from\r\n`Twitter::Error`.\r\n\r\n### Null Objects\r\nIn version 4, methods you would expect to return a `Twitter` object would\r\nreturn `nil` if that object was missing. This may have resulted in a\r\n`NoMethodError`. To prevent such errors, you may have introduced checks for the\r\ntruthiness of the response, for example:\r\n\r\n```ruby\r\nstatus = client.status(55709764298092545)\r\nif status.place\r\n  # Do something with the Twitter::Place object\r\nelsif status.geo\r\n  # Do something with the Twitter::Geo object\r\nend\r\n```\r\nIn version 5, all such methods will return a `Twitter::NullObject` instead of\r\n`nil`. This should prevent `NoMethodError` but may result in unexpected\r\nbehavior if you have truthiness checks in place, since everything is truthy in\r\nRuby except `false` and `nil`. For these cases, there are now predicate\r\nmethods:\r\n\r\n```ruby\r\nstatus = client.status(55709764298092545)\r\nif status.place?\r\n  # Do something with the Twitter::Place object\r\nelsif status.geo?\r\n  # Do something with the Twitter::Geo object\r\nend\r\n```\r\n\r\n### URI Methods\r\nThe `Twitter::List`, `Twitter::Tweet`, and `Twitter::User` objects all have a\r\n`#uri` method, which returns an HTTPS URI to twitter.com. This clobbers the\r\n`Twitter::List#uri` method, which previously returned the list URI's path (not\r\na URI).\r\n\r\nThese methods are aliased to `#url` for users who prefer that nomenclature.\r\n`Twitter::User` previously had a `#url` method, which returned the user's\r\nwebsite. This URI is now available via the `#website` method.\r\n\r\nAll `#uri` methods now return `Addressable::URI` objects instead of strings. To convert an\r\n`Addressable::URI` object to a string, call `#to_s` on it.\r\n\r\n## Configuration\r\nTwitter API v1.1 requires you to authenticate via OAuth, so you'll need to\r\n[register your application with Twitter][register]. Once you've registered an\r\napplication, make sure to set the correct access level, otherwise you may see\r\nthe error:\r\n\r\n[register]: https://dev.twitter.com/apps\r\n\r\n    Read-only application cannot POST\r\n\r\nYour new application will be assigned a consumer key/secret pair and you will\r\nbe assigned an OAuth access token/secret pair for that application. You'll need\r\nto configure these values before you make a request or else you'll get the\r\nerror:\r\n\r\n    Bad Authentication data\r\n\r\nYou can pass configuration options as a block to `Twitter::REST::Client.new`.\r\n\r\n```ruby\r\nclient = Twitter::REST::Client.new do |config|\r\n  config.consumer_key        = \"YOUR_CONSUMER_KEY\"\r\n  config.consumer_secret     = \"YOUR_CONSUMER_SECRET\"\r\n  config.access_token        = \"YOUR_ACCESS_TOKEN\"\r\n  config.access_token_secret = \"YOUR_ACCESS_SECRET\"\r\nend\r\n```\r\n\r\nAfter configuration, requests can be made like so:\r\n\r\n```ruby\r\nclient.update(\"I'm tweeting with @gem!\")\r\n```\r\n\r\n### Middleware\r\nThe Faraday middleware stack is fully configurable and is exposed as a\r\n`Faraday::Builder` object. You can modify the default middleware in-place:\r\n\r\n```ruby\r\nclient.middleware.insert_after Twitter::Response::RaiseError, CustomMiddleware\r\n```\r\n\r\nA custom adapter may be set as part of a custom middleware stack:\r\n\r\n```ruby\r\nclient.middleware = Faraday::Builder.new(\r\n  &Proc.new do |builder|\r\n    # Specify a middleware stack here\r\n    builder.adapter :some_other_adapter\r\n  end\r\n)\r\n```\r\n\r\n## Usage Examples\r\nAll examples require an authenticated Twitter client. See the section on <a\r\nhref=\"#configuration\">configuration</a>.\r\n\r\n**Tweet (as the authenticated user)**\r\n\r\n```ruby\r\nclient.update(\"I'm tweeting with @gem!\")\r\n```\r\n**Follow a user (by screen name or user ID)**\r\n\r\n```ruby\r\nclient.follow(\"gem\")\r\nclient.follow(213747670)\r\n```\r\n**Fetch a user (by screen name or user ID)**\r\n\r\n```ruby\r\nclient.user(\"gem\")\r\nclient.user(213747670)\r\n```\r\n**Fetch a cursored list of followers with profile details (by screen name or user ID, or by implicit authenticated user)**\r\n\r\n```ruby\r\nclient.followers(\"gem\")\r\nclient.followers(213747670)\r\nclient.followers\r\n```\r\n**Fetch a cursored list of friends with profile details (by screen name or user ID, or by implicit authenticated user)**\r\n\r\n```ruby\r\nclient.friends(\"gem\")\r\nclient.friends(213747670)\r\nclient.friends\r\n```\r\n\r\n**Fetch a collection of user_ids that the currently authenticated user does not want to receive retweets from**\r\n\r\n```ruby\r\nclient.no_retweet_ids\r\n````\r\n\r\n**Fetch the timeline of Tweets by a user**\r\n\r\n```ruby\r\nclient.user_timeline(\"gem\")\r\nclient.user_timeline(213747670)\r\n```\r\n**Fetch the timeline of Tweets from the authenticated user's home page**\r\n\r\n```ruby\r\nclient.home_timeline\r\n```\r\n**Fetch the timeline of Tweets mentioning the authenticated user**\r\n\r\n```ruby\r\nclient.mentions_timeline\r\n```\r\n**Fetch a particular Tweet by ID**\r\n\r\n```ruby\r\nclient.status(27558893223)\r\n```\r\n**Collect the 3 most recent marriage proposals to @justinbieber**\r\n\r\n```ruby\r\nclient.search(\"to:justinbieber marry me\", :count => 3, :result_type => \"recent\").collect do |tweet|\r\n  \"#{tweet.user.screen_name}: #{tweet.text}\"\r\nend\r\n```\r\n**Find a Japanese-language Tweet tagged #ruby (excluding retweets)**\r\n\r\n```ruby\r\nclient.search(\"#ruby -rt\", :lang => \"ja\").first.text\r\n```\r\nFor more usage examples, please see the full [documentation][].\r\n\r\n## Object Graph\r\n\r\n![Entity-relationship diagram][erd]\r\n\r\n[erd]: https://github.com/sferik/twitter/raw/master/etc/erd.png \"Entity-relationship diagram\"\r\n\r\nThis entity-relationship diagram is generated programatically. If you add or\r\nremove any Twitter objects, please regenerate the ERD with the following\r\ncommand:\r\n\r\n    bundle exec rake erd\r\n\r\n## Supported Ruby Versions\r\n\r\nThis library aims to support and is [tested against][travis] the following Ruby\r\nversions:\r\n\r\n* Ruby 1.8.7\r\n* Ruby 1.9.2\r\n* Ruby 1.9.3\r\n* Ruby 2.0.0\r\n\r\nIf something doesn't work on one of these versions, it's a bug.\r\n\r\nThis library may inadvertently work (or seem to work) on other Ruby versions,\r\nhowever support will only be provided for the versions listed above.\r\n\r\nIf you would like this library to support another Ruby version or\r\nimplementation, you may volunteer to be a maintainer. Being a maintainer\r\nentails making sure all tests run and pass on that implementation. When\r\nsomething breaks on your implementation, you will be responsible for providing\r\npatches in a timely fashion. If critical issues for a particular implementation\r\nexist at the time of a major release, support for that Ruby version may be\r\ndropped.\r\n\r\n## Versioning\r\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\r\nof this scheme should be reported as bugs. Specifically, if a minor or patch\r\nversion is released that breaks backward compatibility, that version should be\r\nimmediately yanked and/or a new version should be immediately released that\r\nrestores compatibility. Breaking changes to the public API will only be\r\nintroduced with new major versions. As a result of this policy, you can (and\r\nshould) specify a dependency on this gem using the [Pessimistic Version\r\nConstraint][pvc] with two digits of precision. For example:\r\n\r\n    spec.add_dependency 'twitter', '~> 5.0'\r\n\r\n[semver]: http://semver.org/\r\n[pvc]: http://docs.rubygems.org/read/chapter/16#page74\r\n\r\n## Copyright\r\nCopyright (c) 2006-2013 Erik Michaels-Ober, John Nunemaker, Wynn Netherland, Steve Richert, Steve Agalloco.\r\nSee [LICENSE][] for details.\r\n\r\n[license]: LICENSE.md\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}